from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from decouple import config

from keyboards import get_keyboard_buttons
from services.json_writer import save_manager, edit_card_number, load_data, get_all_chats, toggle_chat_status, \
    delete_chat, get_chat_status, update_request_status, get_request_by_id, credit_operator_bonus, set_operator_active, \
    update_procent, update_procent_bonus, update_address_set, save_data
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.json_writer import get_cards_for_manager
from services.validators import check_admin

router = Router()



class AdminCreateChatFSM(StatesGroup):
    waiting_for_chat_id = State()
    waiting_for_chat_title = State()

class AddOperatorFSM(StatesGroup):
    choosing_chat = State()
    selecting_operator = State()





@router.message(F.text == "üí¨ –ß–∞—Ç—ã")
async def admin_chats_menu(message: Message):
    if not check_admin(message.from_user.id):
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç")],
            [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —á–∞—Ç–∞")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏:", reply_markup=kb)


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
async def add_chat_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ ID –≥—Ä—É–ø–ø—ã (–±–µ–∑ -100 –≤ –Ω–∞—á–∞–ª–µ):", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(AdminCreateChatFSM.waiting_for_chat_id)


@router.message(AdminCreateChatFSM.waiting_for_chat_id)
async def add_chat_id(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    if not message.text.strip().isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.")
        return
    await state.update_data(chat_id=int(message.text.strip()))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    await state.set_state(AdminCreateChatFSM.waiting_for_chat_title)


from services.json_writer import add_chat  # –º—ã –µ–≥–æ —É–∂–µ –ø–∏—Å–∞–ª–∏ –≤—ã—à–µ

@router.message(AdminCreateChatFSM.waiting_for_chat_title)
async def add_chat_title(message: Message, state: FSMContext):
    data = await state.get_data()
    success = add_chat(data["chat_id"], message.text.strip())
    if success:
        await message.answer("‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_keyboard_buttons(message.from_user.id))
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_keyboard_buttons(message.from_user.id))
    await state.clear()


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç")
async def start_add_operator(message: Message, state: FSMContext):
    from services.json_writer import get_chats_with_names

    buttons = [
        [KeyboardButton(text=chat["name"])] for chat in get_chats_with_names()

    ]
    buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])

    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
    await state.set_state(AddOperatorFSM.choosing_chat)



@router.message(AddOperatorFSM.choosing_chat)
async def choose_chat(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    from services.json_writer import get_chat_by_name, get_all_managers
    chat = get_chat_by_name(message.text.strip())

    if not chat:
        await message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(chat_id=chat["id"], chat_name=chat["name"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    buttons = []
    for m in get_all_managers():
        name = m.get("name", f"ID {m['id']}")
        buttons.append([KeyboardButton(text=f"{name} ({m['id']})")])

    buttons.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç:", reply_markup=markup)
    await state.set_state(AddOperatorFSM.selecting_operator)




from services.json_writer import assign_operators_to_chat  # —Å–æ–∑–¥–∞–¥–∏–º

@router.message(AddOperatorFSM.selecting_operator)
async def select_operator_to_add(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    try:
        operator_id = int(message.text.strip().split("(")[-1].replace(")", ""))
    except:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    data = await state.get_data()
    from services.json_writer import add_operator_to_chat

    success = add_operator_to_chat(chat_id=data["chat_id"], operator_id=operator_id)
    if success:
        await message.answer(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä {operator_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
    else:
        await message.answer("‚ö†Ô∏è –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")




# @router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
# async def show_chats(message: Message):
#     data = load_data()
#     if not data.get("chats"):
#         await message.answer("–ù–µ—Ç —á–∞—Ç–æ–≤.")
#         return
#
#     text = "üìã –ß–∞—Ç—ã:\n\n"
#     for chat in data["chats"]:
#         text += f"üí¨ {chat['name']} (ID: {chat['id']})\n"
#         text += "üë• –û–ø–µ—Ä–∞—Ç–æ—Ä—ã: " + ", ".join(str(m) for m in chat.get("managers", [])) + "\n\n"
#
#     await message.answer(text)

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
async def show_chats_buttons(message: Message):
    chats = get_all_chats()
    if not chats:
        await message.answer("üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{c['name']} ({'‚úÖ' if c.get('status', True) else '‚ùå'})",
                callback_data=f"chat_{c['id']}"
            )]
            for c in chats
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("chat_"))
async def manage_single_chat(callback: CallbackQuery):
    chat_id = int(callback.data.split("_")[1])
    status = get_chat_status(chat_id)

    from services.json_writer import load_data
    from collections import defaultdict

    data = load_data()
    chat = next((c for c in data["chats"] if c["id"] == chat_id), None)

    text = f"üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º ID: {chat_id}\n\n"

    txs = chat.get("transactions", []) if chat else []
    if not txs:
        text += "üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
    else:
        by_operator = defaultdict(lambda: defaultdict(list))
        for tx in txs:
            by_operator[tx["operator"]][tx.get("card", "****")].append(tx)

        total_kgs = 0
        for op_id, cards in by_operator.items():
            manager = next((m for m in data["managers"] if m["id"] == op_id), {})
            op_name = manager.get("name", f"ID {op_id}")
            text += f"üßæ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã {op_name}\n"
            for card, tx_list in cards.items():
                text += f"üí≥ {card}\n"
                for tx in tx_list:
                    dt = tx.get("timestamp", "‚Äî")
                    amt = tx["money"]
                    total_kgs += amt
                    text += f"üîπ ({dt}) {amt} KGS ‚úÖ\n"
            text += "\n"

        rate = data.get("settings", {}).get("usdt_rate", 89)
        procent = data.get("settings", {}).get("procent", 12)
        usd = round(total_kgs / rate, 2)
        after_fee = round(usd * (1 - procent / 100), 2)

        text += f"üìë –û–±—â–∞—è —Å—É–º–º–∞ KGS: {total_kgs} KGS\n"
        text += f"üßæ ({len(txs)} –∏–Ω–≤–æ–π—Å–æ–≤)\n\n"
        text += f"{total_kgs} / {rate} = {usd}\n"
        text += f"{usd} - {procent}% = {after_fee}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data=f"editop_{chat_id}")],
        [InlineKeyboardButton(
            text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if status else "üü¢ –í–∫–ª—é—á–∏—Ç—å",
            callback_data=f"toggle_{chat_id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data=f"delchat_{chat_id}")]
    ])

    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()



@router.callback_query(F.data.startswith("toggle_"))
async def toggle_status(callback: CallbackQuery):
    chat_id = int(callback.data.split("_")[1])
    new_status = toggle_chat_status(chat_id)
    if new_status is not None:
        status_text = "üü¢ –≤–∫–ª—é—á–µ–Ω" if new_status else "üî¥ –≤—ã–∫–ª—é—á–µ–Ω"
        await callback.message.answer(f"–ß–∞—Ç —Ç–µ–ø–µ—Ä—å {status_text}.")
    else:
        await callback.message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data.startswith("delchat_"))
async def delete_chat_handler(callback: CallbackQuery):
    chat_id = int(callback.data.split("_")[1])
    success = delete_chat(chat_id)
    if success:
        await callback.message.answer("üóë –ß–∞—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç.")
    await callback.answer()


@router.message(F.text == "üìä –ë–∞–ª–∞–Ω—Å—ã")
async def admin_balance_menu(message: Message):
    if not check_admin(message.from_user.id):
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –ë–∞–ª–∞–Ω—Å –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")],
            [KeyboardButton(text="üí¨ –ë–∞–ª–∞–Ω—Å –ø–æ —á–∞—Ç–∞–º")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±–∞–ª–∞–Ω—Å–∞:", reply_markup=kb)


@router.message(F.text == "üë• –ë–∞–ª–∞–Ω—Å –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
async def balance_operators(message: Message):
    from services.json_writer import get_operators_balances
    results = get_operators_balances()

    if not results:
        await message.answer("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    text = "üë• –ë–∞–ª–∞–Ω—Å—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for op in results:
        text += f"{op['name']} ({op['id']}): {op['balance']} —Å–æ–º\n"

    await message.answer(text)


@router.message(F.text == "üí¨ –ë–∞–ª–∞–Ω—Å –ø–æ —á–∞—Ç–∞–º")
async def balance_chats(message: Message):
    from services.json_writer import get_chats_balances
    results = get_chats_balances()

    if not results:
        await message.answer("–ù–µ—Ç —á–∞—Ç–æ–≤.")
        return

    text = "üí¨ –ë–∞–ª–∞–Ω—Å—ã —á–∞—Ç–æ–≤:\n\n"
    for ch in results:
        text += f"{ch['name']} ({ch['id']}): {ch['balance']} —Å–æ–º\n"

    await message.answer(text)

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@router.message(F.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
async def select_operator_for_history(message: Message):
    from services.json_writer import load_data
    data = load_data()

    if not data.get("managers"):
        await message.answer("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{m['name']} ({m['id']})", callback_data=f"txhistory_{m['id']}")]
            for m in data["managers"]
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("txhistory_"))
async def show_operator_report_options(callback: CallbackQuery):
    operator_id = callback.data.split("_")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÜ –°–µ–≥–æ–¥–Ω—è", callback_data=f"txrange_{operator_id}_1")],
        [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data=f"txrange_{operator_id}_7")],
        [InlineKeyboardButton(text="üóìÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data=f"txrange_{operator_id}_30")]
    ])
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}:", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("txrange_"))
async def report_by_date(callback: CallbackQuery):
    parts = callback.data.split("_")
    operator_id = int(parts[1])
    days = int(parts[2])

    from services.json_writer import get_transactions_by_operator
    txs = get_transactions_by_operator(operator_id, days=days)

    if not txs:
        await callback.message.answer("‚ùå –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        await callback.answer()
        return

    text = f"üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ {days} –¥–Ω. –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}:\n\n"
    total = 0

    for tx in txs:
        total += tx["amount"]
        time = datetime.fromisoformat(tx["timestamp"]).strftime("%d.%m %H:%M")
        text += f"üïí {time}\nüí¨ {tx['chat_name']}\nüí≥ {tx['card']}\nüí∞ {tx['amount']} —Å–æ–º\n\n"

    text += f"üßÆ –ò—Ç–æ–≥–æ: {total} —Å–æ–º"
    await callback.message.answer(text)
    await callback.answer()


from aiogram.fsm.state import State, StatesGroup

class SettingsFSM(StatesGroup):
    waiting_for_address = State()
    waiting_for_address_set = State()
    waiting_for_limit = State()
    waiting_for_bonus = State()
    waiting_for_bonus_procent = State()
    waiting_for_usdt_rate = State()


from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from services.json_writer import get_settings

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
async def settings_menu(message: types.Message):
    settings = get_settings()
    address = settings.get("address", "‚Äî")
    address_set = settings.get("address_set", "‚Äî")
    limit = settings.get("limit", "‚Äî")
    usdt_rate = settings.get("usdt_rate", "‚Äî")
    procent = settings.get("procent", "‚Äî")
    bonus = settings.get("procent_bonus", "‚Äî")

    text = (
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:\n"
        f"üè¶ –ê–¥—Ä–µ—Å: <code>{address}</code>\n"
        f"üè¶ –°–µ—Ç—å: <code>{address_set}</code>\n"
        f"üí∞ –õ–∏–º–∏—Ç: {limit} USD\n"
        f"üí∞ –ö—É—Ä—Å: {usdt_rate} \n"
        f"üí± –ü—Ä–æ—Ü–µ–Ω—Ç: {procent}%\n"
        f"üí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞: {bonus}%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞")],
            [KeyboardButton(text="üí± –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å USDT")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=kb, parse_mode="HTML")



from services.json_writer import update_address

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def change_address(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(SettingsFSM.waiting_for_address)

@router.message(SettingsFSM.waiting_for_address)
async def save_address(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    update_address(message.text.strip())
    # await state.clear()
    await state.set_state(SettingsFSM.waiting_for_address_set)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç—å –∫—Ä–∏–ø—Ç—ã:", reply_markup=get_keyboard_buttons(message.from_user.id))


@router.message(SettingsFSM.waiting_for_address_set)
async def save_address(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    update_address_set(message.text.strip())
    await state.clear()
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=get_keyboard_buttons(message.from_user.id))



from services.json_writer import update_limit

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç")
async def change_limit(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(SettingsFSM.waiting_for_limit)

@router.message(SettingsFSM.waiting_for_limit)
async def save_limit(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    try:
        new_limit = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    update_limit(new_limit)
    await state.clear()
    await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_limit} USDT.", reply_markup=get_keyboard_buttons(message.from_user.id))


@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç")
async def change_limit(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(SettingsFSM.waiting_for_bonus)

@router.message(SettingsFSM.waiting_for_bonus)
async def save_limit(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    try:
        new_limit = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    update_procent(new_limit)
    await state.clear()
    await message.answer(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_limit}%.", reply_markup=get_keyboard_buttons(message.from_user.id))



@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞")
async def change_limit(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞ (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(SettingsFSM.waiting_for_bonus_procent)

@router.message(SettingsFSM.waiting_for_bonus_procent)
async def save_limit(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    try:
        new_limit = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    update_procent_bonus(new_limit)
    await state.clear()
    await message.answer(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_limit}%.", reply_markup=get_keyboard_buttons(message.from_user.id))


@router.message(F.text == "üí± –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å USDT")
async def change_usdt_rate(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å USDT:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(SettingsFSM.waiting_for_usdt_rate)

@router.message(SettingsFSM.waiting_for_usdt_rate)
async def save_usdt_rate(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return

    try:
        rate = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    from services.json_writer import update_usdt_rate
    update_usdt_rate(rate)

    await state.clear()
    await message.answer(f"‚úÖ –ö—É—Ä—Å USDT –æ–±–Ω–æ–≤–ª—ë–Ω: {rate}", reply_markup=get_keyboard_buttons(message.from_user.id))


@router.callback_query(F.data.startswith("approve_request:"))
async def approve_request(callback: CallbackQuery):
    request_id = int(callback.data.split(":")[1])
    req = get_request_by_id(request_id)

    if not req or req["status"] != "pending":
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
    update_request_status(request_id, "approved")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
    settings = get_settings()
    procent_bonus = settings.get("procent_bonus", 6)

    bonus = round(req["usd"] * (procent_bonus / 100), 8)

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    credit_operator_bonus(req["operator_id"], bonus)
    set_operator_active(req["operator_id"], True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    try:
        await callback.bot.send_message(
            chat_id=req["operator_id"],
            text=f"üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${bonus}"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {req['operator_id']}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
    await callback.message.edit_text(
        callback.message.text + f"\n\n‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\nüí∏ –ë–æ–Ω—É—Å: {bonus} $",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")



@router.callback_query(F.data.startswith("decline_request:"))
async def decline_request(callback: CallbackQuery):
    request_id = int(callback.data.split(":")[1])
    req = get_request_by_id(request_id)

    if not req or req["status"] != "pending":
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    update_request_status(request_id, "declined")

    await callback.message.edit_text(
        callback.message.text + f"\n\n‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>",
        parse_mode="HTML"
    )
    await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


class RemoveOperatorFSM(StatesGroup):
    choosing_chat = State()
    choosing_operator = State()


@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —á–∞—Ç–∞")
async def start_remove_operator(message: Message, state: FSMContext):
    from services.json_writer import get_chats_with_names

    buttons = [[KeyboardButton(text=chat["name"])] for chat in get_chats_with_names()]
    buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
    await state.set_state(RemoveOperatorFSM.choosing_chat)


@router.message(RemoveOperatorFSM.choosing_chat)
async def choose_chat_to_remove(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    from services.json_writer import get_chat_by_name, get_manager_name_by_id
    chat = get_chat_by_name(message.text.strip())

    if not chat:
        await message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not chat["managers"]:
        await message.answer("‚ùó –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        await state.clear()
        return

    await state.update_data(chat_id=chat["id"], chat_name=chat["name"])

    buttons = [
        [KeyboardButton(text=f"{manager_id} ‚Äî {get_manager_name_by_id(manager_id) or '–ë–µ–∑ –∏–º–µ–Ω–∏'}")]
        for manager_id in chat["managers"]
    ]
    buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(RemoveOperatorFSM.choosing_operator)


@router.message(RemoveOperatorFSM.choosing_operator)
async def remove_operator(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    operator_line = message.text.strip()
    operator_id = operator_line.split("‚Äî")[0].strip()

    if not operator_id.isdigit():
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    from services.json_writer import remove_operator_from_chat

    success = remove_operator_from_chat(chat_id=data["chat_id"], operator_id=int(operator_id))
    if success:
        await message.answer(f"üóë –û–ø–µ—Ä–∞—Ç–æ—Ä `{operator_id}` —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞ *{data['chat_name']}*", parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç.")

    await state.clear()


from aiogram.fsm.state import StatesGroup, State

class TransferToShop(StatesGroup):
    choosing_chat = State()
    waiting_for_amount = State()


@router.message(F.text == "üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–Ω–µ–≥ –≤ —à–æ–ø")
async def start_transfer_to_shop(message: Message, state: FSMContext):
    from services.json_writer import get_all_chats

    chats = get_all_chats()
    if not chats:
        await message.answer("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    buttons = [
        [InlineKeyboardButton(text=chat["name"], callback_data=f"transfer:{chat['id']}")]
        for chat in chats
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)
    await state.set_state(TransferToShop.choosing_chat)



@router.callback_query(F.data.startswith("transfer:"))
async def ask_transfer_amount(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split(":")[1])
    from services.json_writer import get_chat_by_id

    chat = get_chat_by_id(chat_id)
    if not chat:
        await callback.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(chat_id=chat_id, chat_name=chat["name"])
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ *USDT*, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã *{chat['name']}* \n–ë–∞–ª–∞–Ω—Å: {chat['balance']}", parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(TransferToShop.waiting_for_amount)
    await callback.answer()


@router.message(TransferToShop.waiting_for_amount)
async def process_transfer_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    amount_text = message.text.strip()
    if not amount_text.replace('.', '', 1).isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ USDT.")
        return

    amount = float(amount_text)
    data = await state.get_data()
    chat_id = data["chat_id"]
    from services.json_writer import get_chat_by_id, update_chat

    chat = get_chat_by_id(chat_id)
    if not chat:
        await message.answer("‚ùó –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    balance = chat.get("balance", 0)
    all_balance = chat.get("all_balance", 0)

    if amount > balance:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–∞ –±–∞–ª–∞–Ω—Å–µ: {balance} USD")
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º
    chat["balance"] = round(balance - amount, 2)
    update_chat(chat_id, chat)

    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} USD –∏–∑ –≥—Ä—É–ø–ø—ã *{chat['name']}*.\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: {chat['balance']} USD", parse_mode="Markdown")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
    try:
        await message.bot.send_message(
            chat_id=-chat["id"],
            text=(
                f"üì§ *–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —à–æ–ø!*\n"
                f"üí∏ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: *{amount} USD*\n"
                f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: *{chat['balance']} USD*\n"
                f"üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{all_balance} USD*"
            ),
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≥—Ä—É–ø–ø—É: {e}")

    await state.clear()


from aiogram.fsm.state import StatesGroup, State

class ChatSettingsFSM(StatesGroup):
    choosing_chat = State()
    choosing_parameter = State()
    entering_value = State()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
async def start_chat_settings(message: Message, state: FSMContext):
    from services.json_writer import get_all_chats

    chats = get_all_chats()
    if not chats:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=chat["name"], callback_data=f"chatsettings:{chat['id']}")]
        for chat in chats
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=markup)
    await state.set_state(ChatSettingsFSM.choosing_chat)



@router.callback_query(F.data.startswith("chatsettings:"))
async def show_chat_settings(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split(":")[1])
    await state.update_data(chat_id=chat_id)

    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¢ –ö—É—Ä—Å (USDT)", callback_data="set_rate")],
        [InlineKeyboardButton(text="üí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏", callback_data="set_procent")],
        [InlineKeyboardButton(text="üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞", callback_data="set_bonus")],
        [InlineKeyboardButton(text="üè¶ –ê–¥—Ä–µ—Å –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="set_address")],
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=buttons)
    await state.set_state(ChatSettingsFSM.choosing_parameter)
    await callback.answer()


@router.callback_query(ChatSettingsFSM.choosing_parameter)
async def ask_new_value(callback: CallbackQuery, state: FSMContext):
    param = callback.data
    await state.update_data(parameter=param)

    text_map = {
        "set_rate": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å USDT:",
        "set_procent": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏:",
        "set_bonus": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–Ω—É—Å–∞:",
        "set_address": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å LTC:",
        "set_address_set": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–µ—Ç—å LTC:"
    }

    await callback.message.answer(text_map[param])
    await state.set_state(ChatSettingsFSM.entering_value)
    await callback.answer()


@router.message(ChatSettingsFSM.entering_value)
async def save_new_setting(message: Message, state: FSMContext):
    from services.json_writer import update_chat_settings

    data = await state.get_data()
    chat_id = data["chat_id"]
    param = data["parameter"]
    value = message.text.strip()

    if param in ["set_rate", "set_procent", "set_bonus"]:
        try:
            value = float(value)
        except:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

    update_chat_settings(chat_id, param, value)
    await message.answer("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()


class ManualTransactionFSM(StatesGroup):
    waiting_for_card = State()
    waiting_for_amount = State()


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫ –≤—Ä—É—á–Ω—É—é")
async def manual_transaction_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
    await state.set_state(ManualTransactionFSM.waiting_for_card)




@router.message(ManualTransactionFSM.waiting_for_card)
async def handle_card_input(message: Message, state: FSMContext):
    input_card = message.text.strip()

    if not input_card.isdigit() or len(input_card) != 4:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã.")
        return

    data = load_data()

    matched = None
    for chat in data.get("chats", []):
        for operator_id in chat.get("managers", []):
            manager = next((m for m in data.get("managers", []) if m["id"] == operator_id), None)
            if not manager:
                continue
            for card in manager.get("cards", []):
                if card["card"][-4:] == input_card and card.get("active", True):
                    matched = {
                        "chat_id": chat["id"],
                        "operator_id": operator_id,
                        "card_number": card["card"]
                    }
                    break
            if matched:
                break
        if matched:
            break

    if not matched:
        await message.answer("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.")
        await state.clear()
        return

    await state.update_data(**matched)
    await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ KGS:")
    await state.set_state(ManualTransactionFSM.waiting_for_amount)



@router.message(ManualTransactionFSM.waiting_for_amount)
async def handle_amount_input(message: Message, state: FSMContext):
    amount_text = message.text.strip()
    if not amount_text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return

    amount = int(amount_text)
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —á–∞—Ç
    from datetime import datetime
    chats = load_data()
    for chat in chats.get("chats", []):
        if chat["id"] == data["chat_id"]:
            chat.setdefault("transactions", []).append({
                "msg_id": 0,
                "operator": data["operator_id"],
                "card": data["card_number"],
                "money": amount,
                "timestamp": datetime.now().strftime("%d.%m.%Y %H:%M")
            })
            break

    save_data(chats)

    await message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()
