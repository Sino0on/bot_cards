from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from services.json_writer import save_manager
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.json_writer import get_cards_for_manager


router = Router()

# –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddManager(StatesGroup):
    waiting_for_id = State()
    waiting_for_name = State()


class AddCard(StatesGroup):
    waiting_for_card_number = State()


class AcceptMoney(StatesGroup):
    waiting_for_sum = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")]
    ],
    resize_keyboard=True
)

@router.message(F.text == "üß† –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
async def ask_for_id(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(AddManager.waiting_for_id)


@router.message(AddManager.waiting_for_id)
async def ask_for_name(message: Message, state: FSMContext):
    text = message.text.strip()

    if not text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    await state.update_data(manager_id=int(text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(AddManager.waiting_for_name)


@router.message(AddManager.waiting_for_name)
async def save_new_manager(message: Message, state: FSMContext):
    user_data = await state.get_data()
    manager_id = user_data["manager_id"]
    name = message.text.strip()

    success = save_manager(manager_id, name)
    if success:
        await message.answer(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {name} —Å ID {manager_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()


from services.json_writer import find_manager_by_user_id, add_card_to_manager


@router.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def start_add_card(message: Message, state: FSMContext):
    manager = find_manager_by_user_id(message.from_user.id)
    if manager:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:")
        await state.set_state(AddCard.waiting_for_card_number)
    else:
        await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")


@router.message(AddCard.waiting_for_card_number)
async def save_card(message: Message, state: FSMContext):
    card_number = message.text.strip()
    result = add_card_to_manager(message.from_user.id, card_number)

    if result is True:
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–∞ {card_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    elif result is False:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
    await state.clear()


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(F.text == "üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã")
async def show_my_cards(message: Message):
    cards = get_cards_for_manager(message.from_user.id)
    if cards is None:
        await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    if not cards:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç.")
        return

    # –†—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard = []
    row = []

    for idx, card in enumerate(cards):
        button = InlineKeyboardButton(
            text=f"üí≥ {card['card']}",
            callback_data=f"card_{card['card']}"
        )
        row.append(button)

        if len(row) == 2:
            keyboard.append(row)
            row = []

    if row:  # –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞
        keyboard.append(row)

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer("–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:", reply_markup=markup)



@router.callback_query(F.data.startswith("card_"))
async def show_card_info(callback: CallbackQuery):
    card_number = callback.data.split("_")[1]
    cards = get_cards_for_manager(callback.from_user.id)

    if cards:
        for card in cards:
            if card["card"] == card_number:
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É",
                        callback_data=f"delete_{card_number}"
                    )]
                ])
                await callback.message.answer(
                    f"üí≥ –ö–∞—Ä—Ç–∞: ...{card['card']}\nüí∞ –ë–∞–ª–∞–Ω—Å: {card['money']} —Å–æ–º",
                    reply_markup = buttons
                )
                await callback.answer()
                return

    await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


from services.json_writer import delete_card_for_manager

@router.callback_query(F.data.startswith("delete_"))
async def delete_card(callback: CallbackQuery):
    card_number = callback.data.split("_")[1]
    success = delete_card_for_manager(callback.from_user.id, card_number)

    if success:
        await callback.message.answer(f"üóë –ö–∞—Ä—Ç–∞ {card_number} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É.")
    await callback.answer()
