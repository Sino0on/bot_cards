from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards import get_keyboard_buttons
from services.json_writer import save_manager, edit_card_number, get_usdt_rate, add_group_withdraw_request, \
    deduct_from_card, get_user_by_id
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.json_writer import get_cards_for_manager
from services.send_application import notify_admin_about_request
from services.validators import check_admin

router = Router()

# –®–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddManager(StatesGroup):
    waiting_for_id = State()
    waiting_for_name = State()


class AddCard(StatesGroup):
    waiting_for_card_number = State()


class AcceptMoney(StatesGroup):
    waiting_for_sum = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")]
    ],
    resize_keyboard=True
)

@router.message(F.text == "üß† –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
async def ask_for_id(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(AddManager.waiting_for_id)


@router.message(AddManager.waiting_for_id)
async def ask_for_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    text = message.text.strip()

    if not text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    await state.update_data(manager_id=int(text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await state.set_state(AddManager.waiting_for_name)


@router.message(AddManager.waiting_for_name)
async def save_new_manager(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    user_data = await state.get_data()
    manager_id = user_data["manager_id"]
    name = message.text.strip()

    success = save_manager(manager_id, name)
    if success:
        await message.answer(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {name} —Å ID {manager_id} –¥–æ–±–∞–≤–ª–µ–Ω!",reply_markup=get_keyboard_buttons(message.from_user.id))
    else:
        await message.answer("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_keyboard_buttons(message.from_user.id))
    await state.clear()


from services.json_writer import find_manager_by_user_id, add_card_to_manager


@router.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def start_add_card(message: Message, state: FSMContext):
    manager = find_manager_by_user_id(message.from_user.id)
    if manager:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
        await state.set_state(AddCard.waiting_for_card_number)
    else:
        await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")


@router.message(AddCard.waiting_for_card_number)
async def save_card(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    card_number = message.text.strip()
    result = add_card_to_manager(message.from_user.id, card_number)

    if result is True:
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–∞ {card_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
    elif result is False:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=get_keyboard_buttons(message.from_user.id))
    else:
        await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=get_keyboard_buttons(message.from_user.id))
    await state.clear()


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(F.text == "üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã")
async def show_my_cards(message: Message):
    cards = get_cards_for_manager(message.from_user.id)
    if cards is None:
        await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        return

    if not cards:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç.")
        return

    # –†—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard = []
    row = []

    for idx, card in enumerate(cards):
        button = InlineKeyboardButton(
            text=f"üí≥ {card['card']}",
            callback_data=f"card_{card['card']}"
        )
        row.append(button)

        if len(row) == 2:
            keyboard.append(row)
            row = []

    if row:  # –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞
        keyboard.append(row)

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer("–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:", reply_markup=markup)



@router.callback_query(F.data.startswith("card_"))
async def show_card_info(callback: CallbackQuery):
    card_number = callback.data.split("_")[1]
    cards = get_cards_for_manager(callback.from_user.id)

    if cards:
        for card in cards:
            if card["card"] == card_number:
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"delete_{card['card']}"),
                        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{card['card']}")
                    ]
                ])

                card_number = card['card']
                fiat_balance = card['money']
                settings = get_settings()
                usdt_balance = round(fiat_balance / settings['usdt_rate'], 2)  # –ø—Ä–∏–º–µ—Ä –∫—É—Ä—Å–∞ 1 USDT = 89 —Å–æ–º

                # masked = f"{card_number[-4:]}"  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã
                card_display = f"ZHE {card_number}"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å ZHE –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

                text = (
                    f"üí≥ <b>{card_display} KGS</b>\n"
                    f"üåê –§–ò–ê–¢: <b>{fiat_balance:.2f}</b>\n"
                    f"üíµ USDT: <b>{usdt_balance:.2f}</b>"
                )

                await callback.message.answer(
                    text,
                    reply_markup=buttons,
                    parse_mode="HTML"
                )
                await callback.answer()
                return

    await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


from services.json_writer import delete_card_for_manager

@router.callback_query(F.data.startswith("delete_"))
async def delete_card(callback: CallbackQuery):
    card_number = callback.data.split("_")[1]
    success = delete_card_for_manager(callback.from_user.id, card_number)

    if success:
        await callback.message.answer(f"üóë –ö–∞—Ä—Ç–∞ {card_number} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É.")
    await callback.answer()


@router.message(F.text == "üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä—ã")
async def operator_menu(message: Message):
    if not check_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton(text="üìã –í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=kb)


from services.json_writer import load_data

@router.message(F.text == "üìã –í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã")
async def list_operators_inline(message: Message):
    if not check_admin(message.from_user.id):
        return

    data = load_data()
    if not data["managers"]:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{m['name']} ({m['id']})", callback_data=f"opmenu_{m['id']}")]
        for m in data["managers"]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏:", reply_markup=kb)



from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from services.json_writer import delete_manager_by_id

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def choose_operator_to_delete(message: Message):
    data = load_data()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{m['name']} ({m['id']})", callback_data=f"delmgr_{m['id']}")]
        for m in data["managers"]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.callback_query(F.data.startswith("delmgr_"))
async def delete_operator(callback: CallbackQuery):
    operator_id = callback.data.split("_")[1]
    success = delete_manager_by_id(operator_id)

    if success:
        await callback.message.answer(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä {operator_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
    await callback.answer()


@router.callback_query(F.data.startswith("opmenu_"))
async def operator_menu_rekvizit(callback: CallbackQuery, state: FSMContext):
    operator_id = callback.data.split("_")[1]
    await state.set_data({"selected_operator_id": operator_id})

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ö–∞—Ä—Ç—ã (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã)", callback_data=f"op_cards:{operator_id}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"op_add_card:{operator_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_home")]
    ])
    await callback.message.answer(f"–û–ø–µ—Ä–∞—Ç–æ—Ä ID: {operator_id}", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("op_cards:"))
async def show_operator_cards(callback: CallbackQuery, state: FSMContext):
    operator_id = callback.data.split(':')[-1]

    manager = find_manager_by_user_id(int(operator_id))
    if not manager:
        await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not manager["cards"]:
        await callback.message.answer("–£ —ç—Ç–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –∫–∞—Ä—Ç.")
        return

    text = f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {manager['name']}:\n\n"
    for idx, card in enumerate(manager["cards"], 1):
        text += f"{idx}. {card['card']} ‚Äî {card['money']} —Å–æ–º\n"

    await callback.message.answer(text)
    await callback.answer()


class EditCardFSM(StatesGroup):
    waiting_for_new_number = State()


@router.callback_query(F.data.startswith("edit_"))
async def edit_card(callback: CallbackQuery, state: FSMContext):
    card_number = callback.data.split("_")[1]
    await state.set_data({"old_card_number": card_number})
    await state.set_state(EditCardFSM.waiting_for_new_number)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã `{card_number}`:", parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))
    await callback.answer()



@router.message(EditCardFSM.waiting_for_new_number)
async def save_new_card_number(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                             reply_markup=get_keyboard_buttons(message.from_user.id))
        return
    new_card = message.text.strip()
    data = await state.get_data()
    old_card = data["old_card_number"]
    user_id = message.from_user.id

    if not new_card.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    success = edit_card_number(user_id, old_card, new_card)
    if success:
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {old_card} ‚Üí {new_card}", reply_markup=get_keyboard_buttons(message.from_user.id))
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É.", reply_markup=get_keyboard_buttons(message.from_user.id))
    await state.clear()



@router.callback_query(F.data == 'back_to_home')
async def back_to_home(callback: CallbackQuery, state: FSMContext):
    print(callback.from_user.id)
    user = find_manager_by_user_id(callback.from_user.id)
    print(user)
    if user:
        await callback.message.answer(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {user["name"]}', reply_markup=get_keyboard_buttons(callback.message.from_user.id)
        )
        return
    await callback.message.answer(
        '–î–∞–≤–∞–π',
        # reply_markup=get_contact_button(),
    )
    # await state.set_state(Registration.waiting_for_contact)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_home_m(message: Message):
    print(message.from_user.id)
    user = find_manager_by_user_id(message.from_user.id)
    print(user)
    if user:
        await message.answer(
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user["name"]}', reply_markup=get_keyboard_buttons(message.from_user.id)
        )
        return
    await message.answer(
        '–î–∞–≤–∞–π',
        # reply_markup=get_contact_button(),
    )
    # await state.set_state(Registration.waiting_for_contact)


from datetime import datetime, timedelta


@router.message(F.text == "üìÑ –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def my_transactions(message: Message):
    from services.json_writer import get_transactions_by_operator
    transactions = get_transactions_by_operator(message.from_user.id)

    if not transactions:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return

    text = "üìÑ –¢–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
    total = 0

    for tx in transactions:
        total += tx["amount"]
        time = datetime.fromisoformat(tx["timestamp"]).strftime("%d.%m %H:%M")
        text += (
            f"üïí {time}\n"
            f"üí¨ {tx['chat_name']}\n"
            f"üí≥ {tx['card']}\n"
            f"üí∞ {tx['amount']} —Å–æ–º\n\n"
        )

    text += f"üßÆ –ò—Ç–æ–≥–æ: {total} —Å–æ–º"
    await message.answer(text)


from services.json_writer import get_settings, get_cards_for_manager
from aiogram import types
from aiogram.types import Message

@router.message(F.text == "üíº –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç")
async def show_balance_summary(message: Message):
    settings = get_settings()
    limit = settings.get("limit", 800.0)
    usdt_rate = get_usdt_rate()

    cards = get_cards_for_manager(message.from_user.id)
    if not cards:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã.")
        return

    total_usdt = 0
    card_lines = []

    for card in cards:
        card_number = card["card"]
        fiat = card["money"]
        usdt = round(fiat / usdt_rate, 2)
        total_usdt += usdt

        # masked = f"{card_number[-4:]}"
        card_display = f"ZHE *{card_number}"

        card_lines.append(
            f"üí≥ {card_display} KGS\n"
            f"   üåê –§–ò–ê–¢: {fiat:.2f}\n"
            f"   üíµ USDT: {usdt:.2f}"
        )

    remaining = round(limit - total_usdt, 2)

    text = (
        f"üî∞ <b>–õ–∏–º–∏—Ç:</b> {limit:.2f} USDT\n\n"
        f"üß© <b>–§–∏–∞—Ç–Ω—ã–µ —Å—á–µ—Ç–∞:</b>\n"
        + "\n\n".join(card_lines) +
        "\n\nüìä <b>–ò—Ç–æ–≥–æ:</b>\n"
        f"   üíµ USDT: {total_usdt:.2f}\n"
        f"   üî∞ –õ–∏–º–∏—Ç: {remaining:.2f}"
    )
    reply_markup = InlineKeyboardMarkup(
        # inline_keyboard=[
        #     [InlineKeyboardButton(text="üîÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∫—Ä—É–≥", callback_data="finish_round")]
        # ]
    )
    await message.answer(text, parse_mode="HTML", reply_markup=reply_markup)


@router.callback_query(F.data == "finish_round")
async def handle_finish_round(callback: CallbackQuery):
    from services.json_writer import (
        get_manager_cards,
        get_settings,
        create_round_request,
        clear_cards_balance
    )

    operator_id = callback.from_user.id
    cards = get_manager_cards(operator_id)
    total_fiat = sum(c["money"] for c in cards)

    if total_fiat <= 0:
        await callback.message.answer("‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Äî –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∫–∞—Ä—Ç —Ä–∞–≤–µ–Ω 0.")
        await callback.answer()
        return

    # –ö—É—Ä—Å
    settings = get_settings()
    usdt_rate = settings.get("usdt_rate", 89)
    ltc_rate = settings.get("ltc_rate", 86.05)
    address = settings.get("address", "‚Äî")
    deadline = datetime.now() + timedelta(hours=2)

    total_usd = round(total_fiat / usdt_rate, 2)
    total_ltc = round(total_usd / ltc_rate, 8)

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∫–∞—Ä—Ç
    clear_cards_balance(operator_id)

    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    request_id = create_round_request(
        operator_id=operator_id,
        usd=total_usd,
        ltc=total_ltc,
        address=address,
        deadline=deadline
    )
    request_data = {
        "operator_id": operator_id,
        "usd": total_usd,
        "ltc": total_ltc,
        "address": address,
        "deadline": deadline
    }
    await notify_admin_about_request(callback.bot, request_data, request_id)
    await callback.message.answer(
        f"üßæ –ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n\n"
        f"üíµ –°—É–º–º–∞ –≤ USD: {total_usd} $\n"
        f"ü™ô –°—É–º–º–∞ –≤ LTC: {total_ltc} LTC\n\n"
        f"üì¨ –ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n`{address}`\n\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {deadline.strftime('%d %B %Y, %H:%M')}",
        parse_mode="Markdown"
    )

    await callback.answer()


@router.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_operator_balance(message: Message):
    from services.json_writer import get_operator_bonus_balance

    balance = get_operator_bonus_balance(message.from_user.id)

    await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")


@router.message(Command("b"))
async def group_balance_report(message: Message):
    print(message.chat.id)
    print(message.chat.type)
    if not message.chat or message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùó –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    from services.json_writer import get_chat_by_id, get_settings
    chat_id = message.chat.id
    if '100' in str(chat_id):
        chat_id = abs(int(str(abs(chat_id))[3:]))
    print(chat_id)
    group = get_chat_by_id(abs(chat_id))

    if not group:
        await message.answer("‚ùó –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    transactions = group.get("transactions", [])
    if not transactions:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return

    settings = get_settings()
    rate = settings.get("usdt_rate", 89)

    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    total_kgs = 0
    operator_map = {}  # {op_id: [list of tx]}

    for tx in transactions:
        op_id = tx["operator"]
        operator_map.setdefault(op_id, []).append(tx)
        total_kgs += tx["money"]

    lines = []
    for op_id, txs in operator_map.items():
        # user_tag = f"<a href='tg://user?id={op_id}'>–æ–ø–µ—Ä–∞—Ç–æ—Ä {op_id}</a>"
        lines.append(f"üî∫ –û—Ç—á—ë—Ç:")
        for tx in txs:
            ts = tx["timestamp"]

            # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            dt = datetime.fromisoformat(ts)
            formatted = dt.strftime("%d.%m.%Y %H:%M")
            ts = formatted
            amount = tx["money"]
            card = tx.get("card", "****")
            lines.append(f"üî∑ ({ts}) {amount} KGS ‚úÖ (üí≥ {card})")
        lines.append("")

    # 2. –ò—Ç–æ–≥–∏
    data = load_data()
    procent = data.get("settings", {}).get("procent", 12)
    usd = round(total_kgs / rate, 2)
    company_cut = round(usd * procent / 100, 2)

    final_usd = round(usd - company_cut, 2)

    lines.append(f"üìä <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_kgs} KGS</b>")
    lines.append(f"üßæ ({len(transactions)} –∏–Ω–≤–æ–π—Å–æ–≤)")
    lines.append("")
    lines.append(f"{total_kgs} / {rate} = <b>{usd} USD</b>")
    lines.append(f"{usd} - {procent}% = <b>{final_usd} USD</b>")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–≤–æ–¥ –≥–æ—Ç–æ–≤", callback_data=f"group_withdraw:{chat_id}")]
    ])

    await message.answer("\n".join(lines), reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("group_withdraw:"))
async def handle_group_withdraw(callback: CallbackQuery):
    from services.json_writer import (
        get_chat_by_id,
        update_chat,
        get_settings,
        credit_operator_bonus
    )


    chat_id = int(callback.data.split(":")[1])
    print(chat_id)
    chat = get_chat_by_id(chat_id)

    if not chat:
        await callback.answer("‚ùó –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    transactions = chat.get("transactions", [])
    if not transactions:
        await callback.answer("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", show_alert=True)
        return

    settings = get_settings()
    rate = settings.get("usdt_rate", 89)

    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_kgs = sum(tx["money"] for tx in transactions)
    procent = settings.get("procent", 12)  # –∫–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    procent_bonus = settings.get("procent_bonus", 6)  # –±–æ–Ω—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    rate = settings.get("usdt_rate", 89)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ USD
    usd = round(total_kgs / rate, 2)

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∏—Ä–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è
    company_cut = round(usd * (procent / 100), 2)

    # –°—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏
    final_usd = round(usd - company_cut, 2)

    # –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    operator_bonus_total = round(usd * (procent_bonus / 100), 8)

    # –ù–∞—á–∏—Å–ª–∏–º 6% –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    operator_map = {}
    for tx in transactions:
        op_id = tx["operator"]
        operator_map.setdefault(op_id, 0)
        operator_map[op_id] += tx["money"]

    operator_map2 = {}  # {op_id: [list of tx]}

    for tx in transactions:
        op_id = tx["operator"]
        operator_map2.setdefault(op_id, []).append(tx)
        total_kgs += tx["money"]
    lines = []
    for op_id, txs in operator_map2.items():
        print(txs)
        user = get_user_by_id(op_id)
        user_tag = f"<a href='tg://user?username={user['name']}'>–æ–ø–µ—Ä–∞—Ç–æ—Ä {user['name']}</a>"
        lines.append(f"üî∫ –û—Ç—á—ë—Ç: {user_tag}")
        for tx in txs:
            ts = tx["timestamp"]

            # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            dt = datetime.fromisoformat(ts)
            formatted = dt.strftime("%d.%m.%Y %H:%M")
            ts = formatted
            amount = tx["money"]
            card = tx.get("card", "****")
            lines.append(f"üî∑ ({ts}) {amount} KGS ‚úÖ (üí≥ {card})")
        lines.append("")

    # 2. –ò—Ç–æ–≥–∏
    data = load_data()
    procent = data.get("settings", {}).get("procent", 12)
    usd = round(total_kgs / rate, 2)
    company_cut = round(usd * procent / 100, 2)

    final_usd = round(usd - company_cut, 2)

    lines.append(f"üìä <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_kgs} KGS</b>")
    lines.append(f"üßæ ({len(transactions)} –∏–Ω–≤–æ–π—Å–æ–≤)")
    lines.append("")
    lines.append(f"{total_kgs} / {rate} = <b>{usd} USD</b>")
    lines.append(f"{usd} - {procent}% = <b>{final_usd} USD</b>")
    lines.append(f"\n\n–ò–∑ —á–∞—Ç–∞ - {chat['name']}")
    await callback.bot.send_message(chat_id=-4899834369, text=lines)
    total_operator_kgs = sum(operator_map.values())

    for op_id, kgs in operator_map.items():
        share = kgs / total_operator_kgs
        bonus = round(operator_bonus_total * share, 8)
        credit_operator_bonus(op_id, bonus)

        try:
            await callback.bot.send_message(
                chat_id=op_id,
                text=f"üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${bonus}"
            )
        except Exception:
            pass
    # –û—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∂–¥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É —Å—Ä–µ–¥—Å—Ç–≤
    address = settings.get("address", "LTC_ADDRESS_NOT_SET")

    operator_transactions = {}
    for tx in transactions:
        op_id = tx["operator"]
        operator_transactions.setdefault(op_id, []).append(tx)

    for op_id, txs in operator_transactions.items():
        lines = ["üì¨ *–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ä—Ç–∞–º:*"]

        for tx in txs:
            dt = datetime.fromisoformat(tx["timestamp"]).strftime("%d.%m.%Y %H:%M")
            card = tx.get("card", "****")
            amount = tx["money"]
            lines.append(f"üí≥ –ö–∞—Ä—Ç–∞ *...{card[-4:]}* ‚Äî {amount} KGS ({dt})")

        usd_total = round(sum(tx["money"] for tx in txs) / rate, 2)

        lines.append("")
        lines.append(f"üíµ *–ò—Ç–æ–≥–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:* {usd_total} USD")
        lines.append(f"üì• *–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n`{address}`")

        try:
            await callback.bot.send_message(
                chat_id=op_id,
                text="\n".join(lines),
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id}: {e}")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ old_transactions
    chat.setdefault("old_transactions", []).extend(transactions)
    chat["transactions"] = []

    for tx in transactions:
        print(tx)
        deduct_from_card(user_id=tx["operator"], card_number=tx["card"], amount=tx["money"])
    update_chat(chat_id, chat)

    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏
    operator_bonuses = {}
    for op_id, kgs in operator_map.items():
        share = kgs / total_operator_kgs
        bonus = round(operator_bonus_total * share, 8)
        operator_bonuses[op_id] = (kgs, bonus)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    add_group_withdraw_request(
        chat_id=chat["id"],
        chat_name=chat.get("name", "Unknown"),
        transactions=transactions,
        rate=rate,
        company_cut=company_cut,
        operator_bonuses=operator_bonuses,
        final_usd=final_usd
    )

    await callback.message.edit_text(
        callback.message.text + "\n\n‚úÖ <b>–í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.</b>\nüì¶ –ë–∞–ª–∞–Ω—Å –æ—á–∏—â–µ–Ω.",
        parse_mode="HTML"
    )

    await callback.answer("‚úÖ –í—ã–≤–æ–¥ –≥–æ—Ç–æ–≤. –ó–∞—è–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")


@router.message(Command("r"))
async def show_registered_cards(message: Message):
    from services.json_writer import get_chat_by_id, get_formatted_cards

    chat_id = message.chat.id
    chat = get_chat_by_id(chat_id)

    if not chat:
        await message.answer("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    operators = chat.get("managers", [])
    if not operators:
        await message.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    text = f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ —á–∞—Ç–µ *{chat.get('name', '‚Äî')}*:\n\n"

    for op_id in operators:
        cards = get_formatted_cards(op_id)
        if cards:
            text += f"üë§ {op_id}\n"
            for c in cards:
                text += f"  ‚Ä¢ üí≥ {c}*\n"
            text += "\n"
        # else:
            # text += f"üë§ <code>{op_id}</code>\n  ‚Ä¢ üö´ –ù–µ—Ç –∫–∞—Ä—Ç\n\n"

    await message.answer(text, parse_mode="Markdown")

